# rubocop:disable Style/RegexpLiteral, Metrics/BlockLength

scope group: :red_green_refactor

group :red_green_refactor, halt_on_fail: true do
  guard :bundler do
    watch('Gemfile')
  end

  guard :minitest, failed_mode: :keep, all_after_pass: true do
    watch(%r{^test/(.*)\/?test_(.*)\.rb$})
    watch(%r{^test/(.*)\/?(.*)_test\.rb$})
    watch(%r{^lib/(.*/)?([^/]+)\.rb$}) do |m|
      ["test/#{m[1]}test_#{m[2]}.rb", "test/#{m[1]}#{m[2]}_test.rb"]
    end
    watch(%r{^test/test_helper\.rb$}) { 'test' }
  end

  guard :rubocop do
    watch(%r{^Gemfile$})
    watch(%r{^Guardfile$})
    watch(%r{^Rakefile$})
    watch(%r{.+\.rb$})
    watch(%r{(?:.+/)?\.rubocop(?:_todo)?\.yml$}) { |m| File.dirname(m[0]) }
  end

  guard :reek do
    watch(%r{.+\.rb$})
    watch('.reek')
  end

  guard :shell do
    watch(%r{(.*/)?.+\.rb$}) do |m|
      if File.file?(m[0])
        `git add #{m[0]}`
        `echo "#{m[0]} stagged in git."`
      end
    end
  end
end

# rubocop:enable Style/RegexpLiteral, Metrics/BlockLength
